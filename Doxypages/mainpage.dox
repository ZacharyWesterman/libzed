/** @mainpage Introduction

This library contains useful classes and functions for quick and simple data manipulation.
The idea is that this will help decrease development time of other projects.

In particular, the idea behind rolling a custom string class was to have better built-in
support for string manipulation, as well as full support for different string formats.

Currently only Linux and Windows builds are supported, as those are the only machines I own.
Both 64 and 32-bit builds should be fully supported.
This also does compile on the Raspberry Pi and seems stable, though no in-depth testing has been done.
___

- z::core
	Contains core functionality such as strings, arrays, and timers.

- z::file
	Has several classes for easy file system management.

- z::math
	Mathematical constants and functions are defined here.

- z::util
	Contains classes that provide more complicated functionality.

- z::system
	Contains classes that allow interaction with and information about the user's system.

___

##Using This Library

###Required dependencies
- g++ (or other compliant compiler) supporting at least C++11
- make

###Optional dependency
This library has optional support for serialization via [cereal](https://github.com/USCiLab/cereal).
The following classes should be able to be saved and loaded with cereal:
- z::core::string
- z::core::array
- z::core::timer
- z::core::timeout
- z::util::dictionary
- z::util::generic

If cereal is not installed however, this library should compile just fine. Again, totally optional.

###Build options
By default, make should pick the best options for your machine. If that's not the case,
or you want/need different options for any other reason, here are some example flags you can tweak:
- `CC=c++` to compile with `c++` instead of `g++`.
- `LN=gcc` to link with `gcc` instead of `g++`.
- `BITS=64` to target 64-bit architecture instead of that of the host machine. Available options are 64, 32, or null.
- `STD=c++11` to use the C++11 standard instead of the default C++17. This is the same as the `-std=...` flag.
- `OPT=X` to set the optimization level. X should be a non-negative integer, (`s` or `size`), or (`f` or `fast`).
- `LIBDIR=/lib/install/dir` to set where the library should install under instead of `/usr/lib`.
- `ICLDIR=/include/install/dir` to set where the headers should be copied to instead of `/usr/include`.

###Compiling
Just run make in the project directory. I do the following:
~~~
$ make -j$(nproc)
~~~
so that it will compile on as many cores as possible.
On Windows you may have to run `mingw32-make` instead.

The above will compile as a dynamic library (.so on Linux, .dll on Windows).
To compile to a static library:
~~~
$ make -j$(nproc) static
~~~

You should get no errors or warnings.
You can open an issue on [GitHub][repo] if either of those pop up while compiling.

###Installing the dynamic library
In Linux, either run `make install` as superuser or `sudo make install`.

In Windows you can save the DLL into whatever directory you want,
just make sure the PATH system variable contains that folder.

Alternatively, you can copy the DLL/SO into the working directory of your project
and tell the linker to load it from there.

###Linking to this library
Suppose you have some simple project called `example.cpp`.
Let's have this file contain the following:
~~~{.cpp}
#include <z/core/string.hpp>

int main()
{
	zstring string = "Hello world!";
	std::cout << string << std::endl;
	return 0;
}
~~~

To compile and link to the installed library:
~~~
$ g++ -std=c++17 -Wno-psabi -fPIC -o example.o -c example.cpp
$ g++ -lzed -o example.out example.o
~~~

If the DLL/SO and header files are saved in a specific directory that's not in PATH (for example if compiling for Windows):
~~~
$ g++ -I"/path/to/libzed/headers" -std=c++17 -Wno-psabi -fPIC -o example.o -c example.cpp
$ g++ -o example.out example.o -lzed -L"/path/to/lib"
~~~

If linking to the static library (libzed.a), I'd suggest removing unused code to cut down on resultant binary size.
The compile step for this is the same, just alter the linker step:
~~~
$ g++ -o example.out example.o -lzed -L"/path/to/lib" -Wl,--gc-sections
~~~
Note the effectiveness of this depends on the architecture and the specific compiler used.

Afterwards, if binary size is still an issue, stripping out symbols may help a bit.
~~~
$ strip example.out --strip-all
~~~
___
Download or fork: [GitHub repo][repo].

[repo]: https://github.com/ZacharyWesterman/libzed
*/
